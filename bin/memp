#!/bin/sh
# MEMP daemons start/stop script.

#
# Use LSB init script functions for printing messages, if possible
#
lsb_functions="/lib/lsb/init-functions"
if test -f $lsb_functions ; then
  . $lsb_functions
else
  log_success_msg()
  {
    echo " SUCCESS! $@"
  }
  log_failure_msg()
  {
    echo " ERROR! $@"
  }
fi

mode=$1    # start or stop

[ $# -ge 1 ] && shift

case `echo "testing\c"`,`echo -n testing` in
    *c*,-n*) echo_n=   echo_c=     ;;
    *c*,*)   echo_n=-n echo_c=     ;;
    *)       echo_n=   echo_c='\c' ;;
esac

service_startup_timeout=900
nginx_pid_file_path=/usr/local/var/run/nginx.pid
php_pid_file_path=/usr/local/var/run/php-fpm.pid

wait_for_pid () {
  verb="$1"           # created | removed
  pid="$2"            # process ID of the program operating on the pid-file
  pid_file_path="$3" # path to the PID file.

  i=0
  avoid_race_condition="by checking again"

  while test $i -ne $service_startup_timeout ; do

    case "$verb" in
      'created')
        # wait for a PID-file to pop into existence.
        test -s "$pid_file_path" && i='' && break
        ;;
      'removed')
        # wait for this PID-file to disappear
        test ! -s "$pid_file_path" && i='' && break
        ;;
      *)
        echo "wait_for_pid () usage: wait_for_pid created|removed pid pid_file_path"
        exit 1
        ;;
    esac

    # if server isn't running, then pid-file will never be updated
    if test -n "$pid"; then
      if kill -0 "$pid" 2>/dev/null; then
        :  # the server still runs
      else
        # The server may have exited between the last pid-file check and now.
        if test -n "$avoid_race_condition"; then
          avoid_race_condition=""
          continue  # Check again.
        fi

        # there's nothing that will affect the file.
        log_failure_msg "The server quit without updating PID file ($pid_file_path)."
        return 1  # not waiting any more.
      fi
    fi

    echo $echo_n ".$echo_c"
    i=`expr $i + 1`
    sleep 1

  done

  if test -z "$i" ; then
    log_success_msg
    return 0
  else
    log_failure_msg
    return 1
  fi
}

case "$mode" in
  'start')
      # Start daemons
      mysql.server start
      echo $echo_n "Starting PHP-FPM $echo_c"
      php-fpm \
        -d error_log=/var/log/php-fpm/error.log \
        -d slowlog=/var/log/php-fpm/slow.log \
        -D -g $php_pid_file_path >/dev/null 2>&1 & wait_for_pid created "$!" "$php_pid_file_path"; return_value=$?
      echo $echo_n "Starting nginx $echo_c"
      sudo nginx >/dev/null 2>&1 & wait_for_pid created "$!" "$nginx_pid_file_path"; return_value=$?
    ;;

  'stop')
      # Stop daemons.
      # We use signals here to avoid having to know the
      # root password.

      echo $echo_n "Shutting down nginx $echo_c"
      sudo nginx -s stop >/dev/null 2>&1 & wait_for_pid removed "$!" "$nginx_pid_file_path"; return_value=$?

      if test -s "$php_pid_file_path"
      then
        php_pid=`cat "$php_pid_file_path"`

        if (kill -0 $php_pid 2>/dev/null)
        then
          echo $echo_n "Shutting down PHP-FPM $echo_c"
          kill $php_pid
          # mysqld should remove the pid file when it exits, so wait for it.
          wait_for_pid removed "$php_pid" "$php_pid_file_path"; return_value=$?
        else
          log_failure_msg "PHP-FPM server process #$php_pid is not running!"
          rm "$php_pid_file_path"
        fi

      else
        log_failure_msg "PHP-FpM server PID file could not be found!"
      fi

      mysql.server stop
    ;;

  'restart')
      # Stop the service and regardless of whether it was
      # running or not, start it again.
      if $0 stop; then
        $0 start
      else
        log_failure_msg "Failed to stop running servers, so refusing to try to start."
        exit 1
      fi
    ;;

  'reload'|'force-reload')
      mysql.server reload

      if test -s "$php_pid_file_path" ; then
        read php_pid <  "$php_pid_file_path"
        kill -USR2 $php_pid && log_success_msg "Reloading service PHP-FPM"
        touch "$php_pid_file_path"
      else
        log_failure_msg "PHP-FPM PID file could not be found!"
      fi

      if test -s "$nginx_pid_file_path" ; then
        sudo nginx -s reload && log_success_msg "Reloading service nginx"
      else
        log_failure_msg "nginx PID file could not be found!"
      fi
    ;;
  'status')
      mysql.server status

      # First, check to see if pid file exists
      if test -s "$php_pid_file_path" ; then
        read php_pid < "$php_pid_file_path"
        if kill -0 $php_pid 2>/dev/null ; then
          log_success_msg "PHP-FPM running ($php_pid)"
        else
          log_failure_msg "PHP-FPM is not running, but PID file exists"
        fi
      else
        log_failure_msg "PHP-FPM is not running"
      fi

      # First, check to see if pid file exists
      if test -s "$nginx_pid_file_path" ; then
        read nginx_pid < "$nginx_pid_file_path"
        if test `ps -p $nginx_pid|wc -l` -gt 1 ; then
          log_success_msg "nginx running ($nginx_pid)"
        else
          log_failure_msg "nginx is not running, but PID file exists"
        fi
      else
        log_failure_msg "nginx is not running"
      fi
    ;;
    *)
      # usage
      basename=`basename "$0"`
      echo "Usage: $basename  {start|stop|restart|reload|force-reload|status}"
      exit 1
    ;;
esac

exit 0
